name: 发布容器

on:
  #push:
  #  branches:
  #    - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest  # 使用 GitHub 提供的 ubuntu runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build inside Alpine container
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace alpine:latest sh -c "
          apk update && apk add --no-cache \
            git \
            make \
            build-base \
            wget \
            curl \
            bash \
            zlib-dev \
            ca-certificates && \
          wget https://golang.org/dl/go1.23.9.linux-amd64.tar.gz && \
          tar -C /usr/local -xvzf go1.23.9.linux-amd64.tar.gz && \
          export PATH=\$PATH:/usr/local/go/bin && \
          go version && \ 
          cd /workspace  &&\
          git clone https://github.com/zhaarey/apple-music-downloader.git &&  \
          cd /workspace/apple-music-downloader &&  \
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o dl main.go && \
          mkdir -p /workspace/output/z_amdl &&  \
          mv /workspace/apple-music-downloader/dl /workspace/output/z_amdl && \
          mv /workspace/apple-music-downloader/config.yaml /workspace/output/z_amdl && \
          mkdir -p /workspace/sky &&\
          cd /workspace/sky  &&\
          mkdir 
          git clone https://github.com/sky8282/apple-music-downloader.git  &&  \
          cd /workspace/sky/apple-music-downloader &&  \
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o sdl main.go && \
          mkdir -p /workspace/output/s_amdl &&  \
          mv /workspace/sky/apple-music-downloader/sdl /workspace/output/s_amdl && \
          mv /workspace/sky/apple-music-downloader/config.yaml /workspace/output/s_amdl && \
          cd /workspace  &&\
          wget \$(curl -s https://api.github.com/repos/tsl0922/ttyd/releases/latest | grep browser_download_url | grep 'ttyd.x86_64' | cut -d '\"' -f 4) && \
          mv ttyd.x86_64 /workspace/output/ttyd && \
          chmod -R 777 /workspace/output && \
          ls -lR /workspace/output"

    - name: Upload AMDL artifacts
      uses: actions/upload-artifact@v4
      with:
        name: amdl-output
        path: |
          ${{ github.workspace }}/output

    - name: git_MP4box
      run: |
        apt update && apt install build-essential pkg-config g++ git cmake yasm zlib1g-dev -y
        git clone https://github.com/gpac/gpac.git gpac_public
        cd gpac_public
        ./configure --static-bin
        make
        ls -l ./bin/gcc
        mv ./bin/gcc/MP4Box ${GITHUB_WORKSPACE}
        ls -l ${GITHUB_WORKSPACE}

    - name: Upload Go build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MP4Box-output
        path: |
          ${{ github.workspace }}/MP4Box

    - name: Move files    
      run: |
        ls -lR ${GITHUB_WORKSPACE}/output
        mkdir -p ${GITHUB_WORKSPACE}/backup/z_amdl
        mkdir -p ${GITHUB_WORKSPACE}/backup/s_amdl
        mv ${GITHUB_WORKSPACE}/output/z_amdl/config.yaml ${GITHUB_WORKSPACE}/backup/
        mv ${GITHUB_WORKSPACE}/output/s_amdl/config.yaml ${GITHUB_WORKSPACE}/backup/
        

    - name: Set up QEMU
      # QEMU 是用于在一种架构上模拟另一种架构的工具  
      # Docker BuildKit 使用 QEMU 来实现跨平台构建  
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 设置环境变量以包含时间戳  
    - name: Get current date
      run: export TZ='Asia/Shanghai'&& echo "BUILD_DATE=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

    # 构建并推送 Docker 镜像  
    - name: Build and push Docker images
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/amdl-docker:latest
          ${{ secrets.DOCKER_USERNAME }}/amdl-docker:${{ env.BUILD_DATE }}
          ghcr.io/${{ github.repository_owner }}/amdl-docker:latest
          ghcr.io/${{ github.repository_owner }}/amdl-docker:${{ env.BUILD_DATE }}
  
